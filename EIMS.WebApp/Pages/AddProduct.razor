@page "/addproduct"

@inject IAddProductUseCase AddProductUseCase
@inject NavigationManager NavigationManager

<h3>Add Product</h3>

<br />

@if (_product != null)
{
    <EditForm Model="_product" OnInvalidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Product Name</label>
            <InputText id="name" @bind-Value="_product.ProductName" class="form-control"></InputText>
        </div>

        <div class="form-group">
            <label for="qty">Quantity</label>
            <InputNumber id="qty" @bind-Value="_product.Quantity" class="form-control"></InputNumber>
        </div>

        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" @bind-Value="_product.Price" class="form-control"></InputNumber>
        </div>
        
        <ProductInventoriesComponent @ref="productInventoriesComponent"></ProductInventoriesComponent>

        <br>
        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
}

@code {
    private Product? _product;

    private ProductInventoriesComponent productInventoriesComponent;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _product = new Product();
    }

    private async Task OnValidSubmit()
    {
        if (_product != null)
        {            
            await AddProductUseCase.ExecuteAsync(_product);
            NavigationManager.NavigateTo("/products");
        }
    }   
}
